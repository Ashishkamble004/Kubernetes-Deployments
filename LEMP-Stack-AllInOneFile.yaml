#Secrets for MySQL environments

kubectl create secret generic mysql-root-pass --from-literal=password=R00t
kubectl create secret generic mysql-user-pass --from-literal=username=kodekloud_tim, --from-literal=password=BruCStnMT5
kubectl create secret generic mysql-db-url --from-literal=database=kodekloud_db4
kubectl create secret generic mysql-host --from-literal=host=mysql-service

#ENV file for Wordpress config to automatically change it, without hardcoding the config file.
DB_NAME=kodekloud_db4
DB_USER=root
DB_PASSWORD=R00t
DB_HOST=mysql-service
WP_DEBUG=true

#Nginx Config File in a Config-Map.
apiVersion: v1
kind: ConfigMap
metadata:
 name: nginx-config
data:
 nginx.conf: |
  events {}
  http {
      server {
          listen       80;
          server_name  localhost;
          root /var/www/html/;

          # Point index to the Laravel front controller.
          index index.html index.htm index.php;

          location / {
          # URLs to attempt, including pretty ones.
           try_files   $uri $uri/ /index.php?$query_string;
          }
        }
      }


#Nginx & Wordpress Deployment File, Using the Secrets as Env Variables and Shared Volumes between Nginx & Wordpress Container.
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html
          mountPath: /var/www/html
        - name: nginx-config
          mountPath: /etc/nginx/
      - image: wordpress:php7.2-fpm
        name: phpfpm
        env:
        - name: MYSQL_DATABASE
          valueFrom:
           secretKeyRef:
             name: mysql-db-url
             key: database
        - name: MYSQL_USER
          valueFrom:
           secretKeyRef:
            name: mysql-user-pass
            key: username
        - name: MYSQL_PASSWORD
          valueFrom:
           secretKeyRef:
            name: mysql-user-pass
            key: password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
           secretKeyRef:
            name: mysql-root-pass
            key: password
        - name: MYSQL_HOST
          valueFrom:
           secretKeyRef:
            name: mysql-host
            key: host
        volumeMounts:
        - name: html
          mountPath: /var/www/html
      volumes:
       - name: html
         emptyDir: {}
       - name: nginx-config
         configMap:
          name: nginx-config
          items:
            - key: nginx.conf
              path: nginx.conf

#Exposing Nginx as a Service on Nodeport 30008

apiVersion: v1
kind: Service
metadata:
 name: nginx-service
spec:
 ports:
 - targetPort: 80
   port: 80
   nodePort: 30008
 type: NodePort
 selector:
   app: nginx


#Persistent Volume Claim Spec file.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: mysql-deployment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

#Persistent Volume Spec file.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
   path: /home/thor/
  
#Backend MySQL Deployment File, exposed on 3306 port for the container and having the same secrets being used as deployed above.
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mysql-deployment
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-deployment
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql-deployment
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-pv
          mountPath: /var/lib/mysql
        env:
        - name: MYSQL_DATABASE
          valueFrom:
           secretKeyRef:
             name: mysql-db-url
             key: database
        - name: MYSQL_USER
          valueFrom:
           secretKeyRef:
            name: mysql-user-pass
            key: username
        - name: MYSQL_PASSWORD
          valueFrom:
           secretKeyRef:
            name: mysql-user-pass
            key: password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
           secretKeyRef:
            name: mysql-root-pass
            key: password
        - name: MYSQL_HOST
          valueFrom:
           secretKeyRef:
            name: mysql-host
            key: host
      volumes:
       - name: mysql-pv
         persistentVolumeClaim:
          claimName: mysql-pv-claim

#Exposing the MySQL DB as a service for the Wordpress pod to connect to the DB.
apiVersion: v1
kind: Service
metadata:
 name: mysql-service
spec:
 ports:
 - targetPort: 3306
   port: 3306
 selector:
   app: mysql-deployment
